

Functional programming with lambda and streams can really help you write code in a very concise way.

Functions can have functions as input

Functions can output other functions;

------------------------------------------------------------

One way to implement functional programming

step-1: Make a function interface
step-2: Make a class to implement that interface and override that one method in functional interface
step-3: in main class create a new instance and then call the method in the class



FunctionInterface functionalInterface = new ClassWhoImplementFunctionalInterface();
functionalInterface.helloWorld();



-----------------------------------------------------

 second way


 after creating function interface create a new object of that interface type and override the same method without creating a new class.
 then with that object call the overridden method.

FunctionInterface functionInterface  = new FunctionInerface(){
  @Override
    public void sayHello(){
      System.out.println("Hello World");
    };

    functionInterface.sayHello;

}


 ---------------------------------------

 third way to use lambda expression


FunctionInterface functionInterface   = (int x) ->  {   // Here we only implemented lambda as it is function interface we know one and only method is overridden which we don't need to specify the name of
      System.out.println("Hello this "  + x);
   }

functionalInterface.sayHello();  //Calling that lambda to execute that anonymous function;

-------------------
You don't have to write your own functionInterface , you can use already made in the JDK.




----------------------------------------------------------------------------------------Streams------------------------------------------------------------------------


Streams are for performing operations on a group of elements in a functional style.

if you create a new stream like this
Stream<String> shoppingListStream   = shoppingList.stream();

shoppingListStream.sorted().map(item->item.toUpperCase()).filter(...).forEac(...);   //stream create a new collection and peform operation on that // orignal list/collection is not modified , that's why
                                                                                     // you have to store the results in a new collection using collect(Collector.toList());


Now this stream is closed and you CANNOT PERFORM OPERATION ON THIS STEAM AGAIN , IF YOU DO YOU WILL GET AN EXCEPTION;





